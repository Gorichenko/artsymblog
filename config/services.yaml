# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app_blog.emails.contact_email: 'gorichenko1990@gmail.com'
    app_blog.comments.latest_comment_limit: 10
    app_blog_registration_salt: 'fhT56Po4'
    app_blog_user_default_image: 'user.jpeg'
    mailer_transport: gmail
    mailer_encryption: ssl
    mailer_auth_mode: login
    mailer_host: smtp.gmail.com
    mailer_user: manypany25@gmail.com
    mailer_password: Ghbkewrfz1992

services:

#    app.command.set_article:
#      class: App\Command\ElasticSetCommand
#      arguments: [
#        '@doctrine.orm.entity_manager'
#      ]

    app.entity.chat:
      class: App\Entity\Chat

    app.entity.chat.users:
      class: App\Entity\ChatUsers

    app.entity.chat.private:
      class: App\Entity\PrivateChat

    app.consumer.mail_sender:
      class: App\Service\RabbitService

    app.topic.chat:
      class: App\Service\TopicService
      arguments: [
        '@doctrine.orm.entity_manager',
        '@app.entity.chat',
        '@app.entity.chat.users',
        '@app.entity.chat.private',
        '@session']
      tags:
       - { name: gos_web_socket.topic }

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
#    blog.twig.extension:
#        class: App\Twig\BlogExtension
#        tags:
#        - { name: twig.extension }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

gos_web_socket:
  server:
    port: 3000        #The port the socket server will listen on
    host: 0.0.0.0   #The host ip to bind to
    router:
        resources:
        - '%kernel.project_dir%/config/pubsub.yml'

old_sound_rabbit_mq:
  connections:
    default:
      host:     'rabbit1'
      port:     5672
      user:     'rabbitmq'
      password: 'rabbitmq'
      vhost:    '/'
      lazy:     false
      connection_timeout: 3
      read_write_timeout: 3
      keepalive: false
      heartbeat: 0
      use_socket: true
  producers:
    send_email:
      connection:       default
      exchange_options: { name: 'notification.v1.send_email', type: direct }

  consumers:
    send_email:
      connection:       default
      exchange_options: { name: 'notification.v1.send_email', type: direct }
      queue_options:    { name: 'notification.v1.send_email' }
      callback:         app.consumer.mail_sender